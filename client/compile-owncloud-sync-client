#
# The _open_SmashBox Project.
#
# Author: Jakub T. Moscicki, CERN, 2013
# License: AGPL
#
# this script compiles and downloads the owncloud clients automatically
# versions are controlled by variables below
#  - src: download sources
#  - build: contains build directories
#  - patches: applied patches (if any)

# if a patch is applied the name of a build directory is changed to reflect that fact

# offical version of the client
# previous verions: 0.80, 1.3
export OCSYNC=ocsync-0.91.4
export MIRALL=mirall-1.7.0
export DOWNLOAD_PATH=

# latest development preview (with a different download path on the server)
#export OCSYNC=ocsync-0.82.0
#export MIRALL=mirall-1.4.0beta2
#export DOWNLOAD_PATH=testing


# this specifies if to apply patches
# $PATCH is also appended to build directory name to distguish patched from vanilla builds
#export PATCH=
#export PATCH=ssl-patch

#############################################################################################

# workspace is the directory where this script resides

# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
PREFIX="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

PREFIX=`readlink -f $PREFIX` # this is to remove any symlinks that may be local (such as /b)

cat << EOF
======================================================"
compiling owncloud client
-------------------------
PREFIX=$PREFIX
PATCH=$PATCH
OCSYNC=$OCSYNC
MIRALL=$MIRALL
-------------------------
EOF

cd $PREFIX

# download sources if needed

mkdir -p src

cd src

#test -f ${OCSYNC}.tar.bz2 || wget http://download.owncloud.com/download/${DOWNLOAD_PATH}/${OCSYNC}.tar.bz2
#test -f ${MIRALL}.tar.bz2 || wget http://download.owncloud.com/download/${DOWNLOAD_PATH}/${MIRALL}.tar.bz2
test -f ${OCSYNC}.tar.bz2 || wget --no-check-certificate https://pkgs.fedoraproject.org/repo/pkgs/owncloud-csync/ocsync-0.91.4.tar.bz2/3f9bf0b0b131d984aa0574800b77e874//${OCSYNC}.tar.bz2
test -f ${MIRALL}.tar.bz2 || wget --no-check-certificate https://download.owncloud.com/desktop/stable/${MIRALL}.tar.bz2

# You may have to install qtkeychain
#test -f libqt5keychain0_0.3.0-2_amd64.deb   || wget http://hr.archive.ubuntu.com/ubuntu/pool/universe/q/qtkeychain/libqt5keychain0_0.3.0-2_amd64.deb  
#test -f qtkeychain-dev_0.1.0-1ubuntu1_amd64.deb || wget http://hr.archive.ubuntu.com/ubuntu/pool/universe/q/qtkeychain/qtkeychain-dev_0.1.0-1ubuntu1_amd64.deb
#dpkg -i qt5keychain-dev_0.3.0-2_amd64.deb libqt5keychain0_0.3.0-2_amd64.deb

test -d ${OCSYNC} || tar fvxj ${OCSYNC}.tar.bz2 
test -d ${MIRALL} || tar fvxj ${MIRALL}.tar.bz2 

cd ..

# patch sources if needed

if [ $PATCH ]; then
 echo Patching: "$PATCH"
 cd src

 # adjust source directory names

 rm -rf ${OCSYNC}-${PATCH}
 rm -rf ${MIRALL}-${PATCH}
 mv ${OCSYNC} ${OCSYNC}-${PATCH}
 mv ${MIRALL} ${MIRALL}-${PATCH}

 # adjust build directory names

 export OCSYNC=${OCSYNC}-${PATCH}
 export MIRALL=${MIRALL}-${PATCH}
 cd ..

 # patch sources

 patch --backup ${PREFIX}/src/${OCSYNC}/modules/csync_owncloud.c patches/ocsync-ssl.patch
fi

# BUILD

mkdir -p build
cd build

rm -rf build-${OCSYNC}
mkdir build-${OCSYNC}
cd  build-${OCSYNC}
cmake -DCMAKE_BUILD_TYPE=Debug  ${PREFIX}/src/${OCSYNC}
make

mkdir include
cp src/csync_version.h include
cp ${PREFIX}/src/${OCSYNC}/src/*.h include
cd ..

rm -rf build-${MIRALL}
mkdir build-${MIRALL}
cd build-${MIRALL}
cmake -DCMAKE_BUILD_TYPE="Debug" ${PREFIX}/src/${MIRALL} -DCSYNC_BUILD_PATH=${PREFIX}/build/build-${OCSYNC} -DCSYNC_INCLUDE_PATH=${PREFIX}/build/build-${OCSYNC}/include/
make

